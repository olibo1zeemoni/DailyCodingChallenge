
  2> func minimalMaxSum(_ N: [Int], _ k: Int) -> Int { 
  3.     guard !N.isEmpty, k >= 1 else { return 0 } 
  4.      
  5.     var low = N.max()! 
  6.     var high = N.reduce(0, +) 
  7.      
  8.     while low < high { 
  9.         let mid = (low + high) / 2 
 10.         if isFeasible(N, k, mid) { 
 11.             high = mid 
 12.         } else { 
 13.             low = mid + 1 
 14.         } 
 15.     } 
 16.      
 17.     return low 
 18. } 
 19.  
 20. private func isFeasible(_ nums: [Int], _ k: Int, _ s: Int) -> Bool { 
 21.     var partitions = 1 
 22.     var currentSum = 0 
 23.      
 24.     for num in nums { 
 25.         if num > s { 
 26.             return false 
 27.         } 
 28.         if currentSum + num > s { 
 29.             partitions += 1 
 30.             currentSum = num 
 31.             if partitions > k { 
 32.                 return false 
 33.             } 
 34.         } else { 
 35.             currentSum += num 
 36.         } 
 37.     } 
 38.      
 39.     return true 
 40. }
 41> var array = [5, 1, 2, 7, 3, 4]
array: [Int] = 6 values {
  [0] = 5
  [1] = 1
  [2] = 2
  [3] = 7
  [4] = 3
  [5] = 4
}
 42> minimalMaxSum(array,3)
$R0: Int = 8
 43> minimalMaxSum(array,4)
$R1: Int = 7

